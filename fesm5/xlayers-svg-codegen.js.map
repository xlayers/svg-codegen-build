{"version":3,"file":"xlayers-svg-codegen.js","sources":["ng://@xlayers/svg-codegen/lib/svg-context.service.ts","ng://@xlayers/svg-codegen/lib/svg-aggregator.service.ts","ng://@xlayers/svg-codegen/lib/svg-parser.service.ts","ng://@xlayers/svg-codegen/lib/svg-codegen.service.ts","ng://@xlayers/svg-codegen/lib/svg-codegen.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SvgCodeGenContext } from './svg-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SvgContextService {\r\n  identify(current: SketchMSLayer) {\r\n    return ['triangle', 'shapePath'].includes(current._class as string);\r\n  }\r\n\r\n  of(current: SketchMSLayer) {\r\n    return (current as any).svg;\r\n  }\r\n\r\n  put(current: SketchMSLayer, newContext: SvgCodeGenContext) {\r\n    (current as any).svg = { ...this.of(current), ...newContext };\r\n  }\r\n\r\n  clear(current: SketchMSLayer) {\r\n    delete (current as any).svg;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormatService } from '@xlayers/sketch-lib';\r\nimport { SvgContextService } from './svg-context.service';\r\nimport { SvgCodeGenOptions, SvgCodeGenContextPath } from './svg-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SvgAggregatorService {\r\n  constructor(\r\n    private readonly formatService: FormatService,\r\n    private svgContext: SvgContextService\r\n  ) {}\r\n\r\n  aggregate(current: SketchMSLayer, options: SvgCodeGenOptions) {\r\n    const context = this.svgContext.of(current);\r\n    return [\r\n      {\r\n        kind: 'svg',\r\n        language: 'svg',\r\n        value: this.renderFile(current, context.paths, context.offset, options),\r\n        uri: `${this.formatService.normalizeName(current.name)}.svg`\r\n      }\r\n    ];\r\n  }\r\n\r\n  private renderFile(\r\n    current: SketchMSLayer,\r\n    paths: SvgCodeGenContextPath[],\r\n    offset: number,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    const attributes = this.generateXmlAttribute(current, offset, options);\r\n    const openTag = ['<svg', ...attributes].join(' ');\r\n    return `\\\r\n${openTag}>\r\n${paths\r\n  .map(path =>\r\n    this.formatService.indent(1, `<${path.type} ${path.attributes.join(' ')}/>`)\r\n  )\r\n  .join('\\n')}\r\n</svg>`;\r\n  }\r\n\r\n  private generateXmlAttribute(\r\n    current: SketchMSLayer,\r\n    offset: number,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    return [\r\n      ...this.generateXmlHeaderAttribute(options),\r\n      `width=\"${(current.frame.width + offset * 2).toFixed(2)}\"`,\r\n      `height=\"${(current.frame.height + offset * 2).toFixed(2)}\"`\r\n    ];\r\n  }\r\n\r\n  private generateXmlHeaderAttribute(options: SvgCodeGenOptions) {\r\n    return options.xmlNamespace\r\n      ? [\r\n          'version=\"1.1\"',\r\n          `xmlns=\"http://www.w3.org/2000/svg\"`,\r\n          `xmlns:xlink=\"http://www.w3.org/1999/xlink\"`\r\n        ]\r\n      : [];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LayerService, ShapeService, SymbolService } from '@xlayers/sketch-lib';\r\nimport { StyleService } from '@xlayers/sketch-lib';\r\n\r\nimport { SvgCodeGenOptions } from './svg-codegen';\r\nimport { SvgContextService } from './svg-context.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SvgParserService {\r\n  constructor(\r\n    private shape: ShapeService,\r\n    private style: StyleService,\r\n    private readonly layerService: LayerService,\r\n    private readonly symbolService: SymbolService,\r\n    private svgContext: SvgContextService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    this.visit(current, data, options);\r\n  }\r\n\r\n  private walk(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    if (this.layerService.identify(current)) {\r\n      current.layers.forEach(layer => {\r\n        this.visit(layer, data, options);\r\n      });\r\n    } else if (this.symbolService.identify(current)) {\r\n      this.visitSymbol(current, data, options);\r\n    }\r\n  }\r\n\r\n  private visit(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    if (options.force) {\r\n      this.svgContext.clear(current);\r\n    }\r\n    if (this.svgContext.identify(current)) {\r\n      if (!this.svgContext.of(current)) {\r\n        this.visitContent(current);\r\n      }\r\n    }\r\n    this.walk(current, data, options);\r\n  }\r\n\r\n  private visitSymbol(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options: SvgCodeGenOptions\r\n  ) {\r\n    const symbolMaster = this.symbolService.lookup(current, data);\r\n    if (symbolMaster) {\r\n      this.compute(symbolMaster, data, options);\r\n    }\r\n  }\r\n\r\n  private visitContent(current: SketchMSLayer) {\r\n    switch (current._class as string) {\r\n      case 'shapePath':\r\n        this.visitShapePath(current);\r\n        break;\r\n\r\n      case 'shapeGroup':\r\n        this.visitShapeGroup(current);\r\n        break;\r\n\r\n      case 'triangle':\r\n        this.visitTriangleShape(current);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private visitShapePath(current: SketchMSLayer) {\r\n    const config = [];\r\n    let offset = 0;\r\n\r\n    // TODO: Support multiple border\r\n    if (\r\n      current.style.borders &&\r\n      current.style.borders.length > 0 &&\r\n      current.style.borders[0].thickness\r\n    ) {\r\n      config.push(`stroke-width=\"${current.style.borders[0].thickness}\"`);\r\n      const color = this.style.parseColorAsHex(current.style.borders[0].color);\r\n\r\n      config.push(`stroke=\"${color}\"`);\r\n      offset = current.style.borders[0].thickness;\r\n    }\r\n\r\n    // TODO: move to @types/sketchapp\r\n    const origin = this.shape.parsePoint(\r\n      (current as any).points[0].point,\r\n      offset,\r\n      current\r\n    );\r\n    const segments = (current as any).points.slice(1).map(curvePoint => {\r\n      const curveFrom = this.shape.parsePoint(\r\n        curvePoint.curveFrom,\r\n        offset,\r\n        current\r\n      );\r\n      const curveTo = this.shape.parsePoint(\r\n        curvePoint.curveTo,\r\n        offset,\r\n        current\r\n      );\r\n      const currPoint = this.shape.parsePoint(\r\n        curvePoint.point,\r\n        offset,\r\n        current\r\n      );\r\n      if (curveTo.x === curveFrom.x && curveTo.y === curveFrom.y) {\r\n        return `L ${currPoint.x} ${currPoint.y}`;\r\n      }\r\n      return `S ${curveTo.x} ${curveTo.y}, ${currPoint.x} ${currPoint.y}`;\r\n    });\r\n\r\n    segments.unshift(`M${origin.x} ${origin.y}`);\r\n\r\n    if ((current as any).isClosed) {\r\n      segments.push('z');\r\n    }\r\n    const fillStyle = this.extractFillStyle(current);\r\n\r\n    this.svgContext.put(current, {\r\n      offset,\r\n      paths: [\r\n        { type: 'path', attributes: [...config, fillStyle, `d=\"${segments}\"`] }\r\n      ]\r\n    });\r\n  }\r\n\r\n  private visitTriangleShape(current: SketchMSLayer) {\r\n    const config = [];\r\n    let offset = 0;\r\n\r\n    // TODO: Support multiple border\r\n    if (\r\n      current.style.borders &&\r\n      current.style.borders.length > 0 &&\r\n      current.style.borders[0].thickness\r\n    ) {\r\n      config.push(`stroke-width=\"${current.style.borders[0].thickness / 2}\"`);\r\n      const color = this.style.parseColorAsHex(current.style.borders[0].color);\r\n      config.push(`stroke=\"${color}\"`);\r\n      offset = current.style.borders[0].thickness;\r\n    }\r\n\r\n    const segments = (current as any).points\r\n      .map(curvePoint => {\r\n        const currPoint = this.shape.parsePoint(\r\n          curvePoint.point,\r\n          offset / 2,\r\n          current\r\n        );\r\n        return `${currPoint.x}, ${currPoint.y}`;\r\n      })\r\n      .join(' ');\r\n\r\n    const fillStyle = this.extractFillStyle(current);\r\n\r\n    this.svgContext.put(current, {\r\n      offset,\r\n      paths: [\r\n        {\r\n          type: 'polygon',\r\n          attributes: [...config, fillStyle, `points=\"${segments}\"`]\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  private visitShapeGroup(current: SketchMSLayer) {\r\n    console.log(current);\r\n    const offset = 0;\r\n    const paths = current.layers.map(layer => {\r\n      // TODO: move to @types/sketchapp\r\n      const origin = this.shape.parsePoint(\r\n        (layer as any).points[0].point,\r\n        offset,\r\n        layer\r\n      );\r\n      const segments = (layer as any).points.slice(1).map(curvePoint => {\r\n        const curveFrom = this.shape.parsePoint(\r\n          curvePoint.curveFrom,\r\n          offset,\r\n          layer\r\n        );\r\n        const curveTo = this.shape.parsePoint(\r\n          curvePoint.curveTo,\r\n          offset,\r\n          layer\r\n        );\r\n        const currPoint = this.shape.parsePoint(\r\n          curvePoint.point,\r\n          offset,\r\n          layer\r\n        );\r\n        if (curveTo.x === curveFrom.x && curveTo.y === curveFrom.y) {\r\n          return `L ${layer.frame.x + currPoint.x} ${layer.frame.y +\r\n            currPoint.y}`;\r\n        }\r\n        return `S ${layer.frame.x + curveTo.x} ${layer.frame.y +\r\n          curveTo.y}, ${layer.frame.x + currPoint.x} ${layer.frame.y +\r\n          currPoint.y}`;\r\n      });\r\n\r\n      segments.unshift(\r\n        `M${layer.frame.x + origin.x} ${layer.frame.y + origin.y}`\r\n      );\r\n\r\n      // TODO: isClosed to type\r\n      if ((layer as any).isClosed) {\r\n        segments.push('z');\r\n      }\r\n\r\n      return segments.join(' ');\r\n    });\r\n\r\n    const fillStyle = this.extractFillStyle(current);\r\n\r\n    this.svgContext.put(current, {\r\n      offset,\r\n      paths: [\r\n        { type: 'path', attributes: [fillStyle, `d=\"${paths.join(' ')}\"`] }\r\n      ]\r\n    });\r\n  }\r\n\r\n  private extractFillStyle(current: SketchMSLayer) {\r\n    const obj = (current as any).style.fills;\r\n\r\n    if (obj && obj.length > 0) {\r\n      // we only support one fill: take the first one!\r\n      // ignore the other fills\r\n      const firstFill = obj[0];\r\n\r\n      if (firstFill.isEnabled) {\r\n        const fillColor = this.style.parseColorAsRgba(firstFill.color);\r\n\r\n        return `fill=\"${fillColor}\"`;\r\n      }\r\n    }\r\n\r\n    return 'fill=\"none\"';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SvgContextService } from './svg-context.service';\r\nimport { SvgAggregatorService } from './svg-aggregator.service';\r\nimport { SvgParserService } from './svg-parser.service';\r\nimport { SvgCodeGenOptions } from './svg-codegen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SvgCodeGenService {\r\n  constructor(\r\n    private svgContext: SvgContextService,\r\n    private svgParser: SvgParserService,\r\n    private svgAggretatorService: SvgAggregatorService\r\n  ) {}\r\n\r\n  compute(\r\n    current: SketchMSLayer,\r\n    data: SketchMSData,\r\n    options?: SvgCodeGenOptions\r\n  ) {\r\n    this.svgParser.compute(current, data, this.compileOptions(options));\r\n  }\r\n\r\n  aggregate(current: SketchMSLayer, options?: SvgCodeGenOptions) {\r\n    return this.svgAggretatorService.aggregate(\r\n      current,\r\n      this.compileOptions(options)\r\n    );\r\n  }\r\n\r\n  identify(current: SketchMSLayer) {\r\n    return this.svgContext.identify(current);\r\n  }\r\n\r\n  context(current: SketchMSLayer) {\r\n    return this.svgContext.of(current);\r\n  }\r\n\r\n  private compileOptions(options: SvgCodeGenOptions) {\r\n    return {\r\n      xmlNamespace: true,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SketchLibModule } from '@xlayers/sketch-lib';\r\n\r\n@NgModule({\r\n  imports: [SketchLibModule]\r\n})\r\nexport class SvgCodeGenModule {}\r\n"],"names":["tslib_1.__spread"],"mappings":"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"}